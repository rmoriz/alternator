# Alternative Dockerfile with runtime GPU detection
# This creates smaller base images by installing GPU support only when needed
FROM rust:1.83-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Create app user for security
RUN useradd -m -u 1001 alternator

# Set working directory
WORKDIR /app

# Copy dependency manifests
COPY Cargo.toml Cargo.lock ./

# Copy source code
COPY src/ ./src/

# Build the application in release mode
RUN cargo build --release

# Runtime stage with Python and runtime GPU detection
FROM python:3.11-slim

# Install system dependencies including FFmpeg and GPU detection tools
RUN apt-get update && apt-get install -y \
    ca-certificates \
    ffmpeg \
    curl \
    lspci \
    pciutils \
    && rm -rf /var/lib/apt/lists/*

# Install OpenAI Whisper (base installation without GPU support)
RUN pip3 install --no-cache-dir openai-whisper

# Create app user with same UID as builder stage
RUN useradd -m -u 1001 alternator

# Create directories for configuration and models
RUN mkdir -p /app/config /app/models && chown -R alternator:alternator /app

# Copy GPU setup script
COPY scripts/setup-gpu.sh /usr/local/bin/setup-gpu.sh
RUN chmod +x /usr/local/bin/setup-gpu.sh

# Copy binary from builder stage
COPY --from=builder /app/target/release/alternator /usr/local/bin/alternator
RUN chmod +x /usr/local/bin/alternator

# Switch to non-root user
USER alternator

# Set working directory
WORKDIR /app

# Create volumes for configuration and models
VOLUME ["/app/config", "/app/models"]

# Environment variables for container deployment
ENV ALTERNATOR_CONFIG_PATH=/app/config/alternator.toml
ENV RUST_LOG=info
# Default Whisper model cache directory (can be overridden by model_dir config)
ENV XDG_CACHE_HOME=/app/models

# Runtime GPU setup script will be run when container starts
# This allows dynamic GPU support based on host hardware
RUN echo '#!/bin/bash\nsetup-gpu.sh\nexec "$@"' > /entrypoint.sh && chmod +x /entrypoint.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD pgrep alternator || exit 1

# Run GPU setup then the application
ENTRYPOINT ["/entrypoint.sh"]
CMD ["alternator", "--config", "/app/config/alternator.toml"]