name: CI

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Test stable on both platforms
        include:
          - os: ubuntu-latest
            rust: stable
            run_checks: true
          - os: macos-latest  
            rust: stable
            run_checks: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2.8.0
      with:
        key: ${{ runner.os }}-${{ matrix.rust }}

    - name: Check code formatting
      run: cargo fmt --all -- --check
      if: matrix.run_checks

    - name: Run Clippy linting
      run: cargo clippy --all-targets --all-features -- -D warnings
      if: matrix.run_checks

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run integration tests
      run: cargo test --test integration_tests --verbose -- --test-threads=1

    - name: Test build in release mode
      run: cargo build --release --verbose

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2.8.0

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit


  build-binaries-linux:
    name: Build Linux Binaries
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    if: github.event_name == 'push'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            artifact_name: alternator
            docker_arch: linux-amd64
          - target: aarch64-unknown-linux-gnu
            artifact_name: alternator
            docker_arch: linux-arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2.8.0
      with:
        key: ubuntu-${{ matrix.target }}-release

    - name: Install cross-compilation tools
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Build release binary
      run: |
        cross build --release --target ${{ matrix.target }}

    - name: Verify binary
      run: |
        ls -la target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        file target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.docker_arch }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        retention-days: 1

  build-binaries-macos:
    name: Build macOS Binaries
    runs-on: macos-latest
    needs: [test, security-audit]
    if: github.event_name == 'push'
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            artifact_name: alternator
            docker_arch: darwin-amd64
          - target: aarch64-apple-darwin
            artifact_name: alternator
            docker_arch: darwin-arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2.8.0
      with:
        key: macos-${{ matrix.target }}-release

    - name: Build release binary
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Verify binary
      run: |
        ls -la target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        file target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.docker_arch }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        retention-days: 1

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build-binaries-linux]
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download Linux AMD64 binary
      uses: actions/download-artifact@v4
      with:
        name: binary-linux-amd64
        path: binaries/linux-amd64/

    - name: Download Linux ARM64 binary
      uses: actions/download-artifact@v4
      with:
        name: binary-linux-arm64
        path: binaries/linux-arm64/

    - name: Make binaries executable
      run: |
        chmod +x binaries/linux-amd64/alternator
        chmod +x binaries/linux-arm64/alternator

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile.optimized
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max