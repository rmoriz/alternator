name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Get version from tag or input
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      run: |
        gh release create ${{ steps.get_version.outputs.version }} \
          --title "Alternator ${{ steps.get_version.outputs.version }}" \
          --notes-file CHANGELOG.md \
          --draft=false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    name: Build Release
    needs: create-release
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: alternator
            asset_name: alternator-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: alternator
            asset_name: alternator-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: alternator
            asset_name: alternator-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: alternator
            asset_name: alternator-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2.8.0
      with:
        key: ${{ runner.os }}-${{ matrix.target }}-release

    - name: Install cross-compilation tools
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Build release binary
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

    - name: Verify binary
      run: |
        ls -la target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        file target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Strip binary (macOS)
      if: matrix.os == 'macos-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Create release archive
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}.exe
        else
          tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
        fi

    - name: Upload Release Asset
      run: |
        gh release upload ${{ needs.create-release.outputs.version }} \
          ./${{ matrix.asset_name }}.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload binary artifact for Docker (Linux only)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}-binary
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        retention-days: 1

  build-docker:
    name: Build Docker Images
    needs: [build-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - variant: cpu
            dockerfile: Dockerfile.cpu
            suffix: -cpu
            description: "CPU-only build (smallest size)"
          - variant: nvidia
            dockerfile: Dockerfile.nvidia
            suffix: -nvidia
            description: "NVIDIA GPU support with CUDA"
          - variant: amd
            dockerfile: Dockerfile.amd
            suffix: -amd
            description: "AMD GPU support with ROCm"
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download Linux AMD64 binary
      uses: actions/download-artifact@v4
      with:
        name: alternator-linux-amd64-binary
        path: binaries/linux-amd64/

    - name: Download Linux ARM64 binary
      uses: actions/download-artifact@v4
      with:
        name: alternator-linux-arm64-binary
        path: binaries/linux-arm64/

    - name: Make binaries executable
      run: |
        chmod +x binaries/linux-amd64/alternator
        chmod +x binaries/linux-arm64/alternator

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}${{ matrix.suffix }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest

    - name: Build and push Docker image (${{ matrix.variant }})
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./${{ matrix.dockerfile }}
        platforms: ${{ matrix.variant == 'cpu' && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          ${{ steps.meta.outputs.labels }}
          org.opencontainers.image.title=Alternator (${{ matrix.variant }})
          org.opencontainers.image.description=${{ matrix.description }}
          org.opencontainers.image.variant=${{ matrix.variant }}
        cache-from: type=gha,scope=${{ matrix.variant }}
        cache-to: type=gha,mode=max,scope=${{ matrix.variant }}